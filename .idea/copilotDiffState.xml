<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/backend/.gitignore">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/.gitignore" />
              <option name="updatedContent" value="# Python&#10;__pycache__/&#10;*.py[cod]&#10;*$py.class&#10;*.so&#10;.Python&#10;build/&#10;develop-eggs/&#10;dist/&#10;downloads/&#10;eggs/&#10;.eggs/&#10;lib/&#10;lib64/&#10;parts/&#10;sdist/&#10;var/&#10;wheels/&#10;share/python-wheels/&#10;*.egg-info/&#10;.installed.cfg&#10;*.egg&#10;MANIFEST&#10;&#10;# Django&#10;*.log&#10;local_settings.py&#10;db.sqlite3&#10;db.sqlite3-journal&#10;media/&#10;staticfiles/&#10;&#10;# Virtual environments&#10;.env&#10;.venv&#10;env/&#10;venv/&#10;ENV/&#10;env.bak/&#10;venv.bak/&#10;&#10;# IDEs&#10;.vscode/&#10;.idea/&#10;*.swp&#10;*.swo&#10;*~&#10;&#10;# OS&#10;.DS_Store&#10;.DS_Store?&#10;._*&#10;.Spotlight-V100&#10;.Trashes&#10;ehthumbs.db&#10;Thumbs.db&#10;&#10;# Coverage reports&#10;htmlcov/&#10;.tox/&#10;.nox/&#10;.coverage&#10;.coverage.*&#10;.cache&#10;nosetests.xml&#10;coverage.xml&#10;*.cover&#10;*.py,cover&#10;.hypothesis/&#10;.pytest_cache/&#10;cover/&#10;&#10;# Celery&#10;celerybeat-schedule&#10;celerybeat.pid&#10;&#10;# Django migrations (optional - uncomment if you want to ignore migrations)&#10;# */migrations/*.py&#10;# !*/migrations/__init__.py" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/kunnic/admin.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/kunnic/admin.py" />
              <option name="originalContent" value="from django.contrib import admin&#10;from kunnic.models import Post,Song,Gallery&#10;# Register your models here.&#10;&#10;@admin.register(Post)&#10;class PostAdmin(admin.ModelAdmin):&#10;    list_display = ('title', 'slug', 'is_published', 'published_at', 'updated_at', 'created_at')&#10;    prepopulated_fields = {'slug': ('title',)}&#10;    search_fields = ('title', 'content')&#10;    list_filter = ('is_published', 'published_at')&#10;    ordering = ('-published_at',)&#10;&#10;@admin.register(Song)&#10;class SongAdmin(admin.ModelAdmin):&#10;    list_display = ('title', 'artist', 'release_date', 'upload_date')&#10;    search_fields = ('title', 'artist')&#10;    list_filter = ('release_date',)&#10;    ordering = ('-release_date',)&#10;&#10;@admin.register(Gallery)&#10;class GalleryAdmin(admin.ModelAdmin):&#10;    list_display = ('image', 'caption', 'upload_date')&#10;    search_fields = ('caption',)&#10;    ordering = ('-upload_date',)&#10;    readonly_fields = ('upload_date',)&#10;" />
              <option name="updatedContent" value="from django.contrib import admin&#10;from kunnic.models import Post,Song,GalleryImage&#10;# Register your models here.&#10;&#10;@admin.register(Post)&#10;class PostAdmin(admin.ModelAdmin):&#10;    list_display = ('title', 'slug', 'is_published', 'published_at', 'updated_at', 'created_at')&#10;    prepopulated_fields = {'slug': ('title',)}&#10;    search_fields = ('title', 'content')&#10;    list_filter = ('is_published', 'published_at')&#10;    ordering = ('-published_at',)&#10;&#10;@admin.register(Song)&#10;class SongAdmin(admin.ModelAdmin):&#10;    list_display = ('title', 'artist', 'release_date', 'upload_date')&#10;    search_fields = ('title', 'artist')&#10;    list_filter = ('release_date',)&#10;    ordering = ('-release_date',)&#10;&#10;@admin.register(GalleryImage)&#10;class GalleryAdmin(admin.ModelAdmin):&#10;    list_display = ('image', 'caption', 'upload_date')&#10;    search_fields = ('caption',)&#10;    ordering = ('-upload_date',)&#10;    readonly_fields = ('upload_date',)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/kunnic/models.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/kunnic/models.py" />
              <option name="originalContent" value="from django.db import models&#10;from django.contrib.auth.models import User&#10;from django.utils.text import slugify&#10;from django.utils import timezone&#10;# Create your models here.&#10;&#10;class Post(models.Model):&#10;    title = models.CharField(max_length=200, verbose_name=&quot;Title&quot;, help_text=&quot;Title of the post&quot;)&#10;    slug = models.SlugField(max_length=200, unique=True, verbose_name=&quot;Slug&quot;, help_text=&quot;Unique identifier for the post&quot;)&#10;    content = models.TextField(verbose_name=&quot;Content&quot;, help_text=&quot;Main content of the post&quot;)&#10;    is_published = models.BooleanField(default=False, verbose_name=&quot;Is Published&quot;, help_text=&quot;Indicates if the post is published&quot;)&#10;    published_at = models.DateTimeField(default=timezone.now, verbose_name=&quot;Published At&quot;, help_text=&quot;Date and time when the post was published&quot;)&#10;    updated_at = models.DateTimeField(auto_now=True, verbose_name=&quot;Updated At&quot;, help_text=&quot;Date and time when the post was last updated&quot;)&#10;    created_at = models.DateTimeField(auto_now_add=True, verbose_name=&quot;Created At&quot;, help_text=&quot;Date and time when the post was created&quot;)&#10;    author = models.ForeignKey(&#10;        User,&#10;        on_delete=models.CASCADE,&#10;        related_name='posts',&#10;        verbose_name=&quot;Author&quot;,&#10;        help_text=&quot;Author of the post&quot;&#10;    )&#10;&#10;    class Meta:&#10;        ordering = ['-published_at']&#10;        verbose_name = &quot;Post&quot;&#10;        verbose_name_plural = &quot;Posts&quot;&#10;&#10;    def __str__(self):&#10;        return self.title&#10;&#10;    def save(self, *args, **kwargs):&#10;        if not self.slug:&#10;            self.slug = slugify(self.title)&#10;        super().save(*args, **kwargs)&#10;&#10;class Song(models.Model):&#10;    title = models.CharField(max_length=200, verbose_name=&quot;Title&quot;, help_text=&quot;Title of the song&quot;)&#10;    artist = models.CharField(max_length=100, verbose_name=&quot;Artist&quot;, help_text=&quot;Artist of the song&quot;)&#10;    audio_file = models.FileField(upload_to='songs/', verbose_name=&quot;Audio File&quot;, help_text=&quot;Audio file of the song&quot;)&#10;    lyrics = models.TextField(blank=True, null=True, verbose_name=&quot;Lyrics&quot;, help_text=&quot;Lyrics of the song&quot;)&#10;    release_date = models.DateField(verbose_name=&quot;Release Date&quot;, help_text=&quot;Release date of the song&quot;)&#10;    upload_date = models.DateTimeField(auto_now_add=True, verbose_name=&quot;Created At&quot;, help_text=&quot;Date and time when the song was created&quot;)&#10;&#10;    class Meta:&#10;        ordering = ['-release_date']&#10;        verbose_name = &quot;Song&quot;&#10;        verbose_name_plural = &quot;Songs&quot;&#10;&#10;    def __str__(self):&#10;        return f&quot;{self.title} by {self.artist}&quot; if self.artist else self.title&#10;&#10;class Gallery(models.Model):&#10;    image = models.ImageField(upload_to='gallery/', verbose_name=&quot;Image&quot;, help_text=&quot;Image for the gallery&quot;)&#10;    caption = models.CharField(max_length=255, blank=True, null=True, verbose_name=&quot;Caption&quot;, help_text=&quot;Caption for the image&quot;)&#10;    upload_date = models.DateTimeField(auto_now_add=True, verbose_name=&quot;Upload Date&quot;, help_text=&quot;Date and time when the image was uploaded&quot;)&#10;&#10;    class Meta:&#10;        ordering = ['-upload_date']&#10;        verbose_name = &quot;Gallery Image&quot;&#10;        verbose_name_plural = &quot;Gallery Images&quot;&#10;&#10;    def __str__(self):&#10;        return self.image.name" />
              <option name="updatedContent" value="from django.db import models&#10;from django.contrib.auth.models import User&#10;from django.utils.text import slugify&#10;from django.utils import timezone&#10;# Create your models here.&#10;&#10;class Post(models.Model):&#10;    title = models.CharField(max_length=200, verbose_name=&quot;Title&quot;, help_text=&quot;Title of the post&quot;)&#10;    slug = models.SlugField(max_length=200, unique=True, verbose_name=&quot;Slug&quot;, help_text=&quot;Unique identifier for the post&quot;)&#10;    content = models.TextField(verbose_name=&quot;Content&quot;, help_text=&quot;Main content of the post&quot;)&#10;    is_published = models.BooleanField(default=False, verbose_name=&quot;Is Published&quot;, help_text=&quot;Indicates if the post is published&quot;)&#10;    published_at = models.DateTimeField(default=timezone.now, verbose_name=&quot;Published At&quot;, help_text=&quot;Date and time when the post was published&quot;)&#10;    updated_at = models.DateTimeField(auto_now=True, verbose_name=&quot;Updated At&quot;, help_text=&quot;Date and time when the post was last updated&quot;)&#10;    created_at = models.DateTimeField(auto_now_add=True, verbose_name=&quot;Created At&quot;, help_text=&quot;Date and time when the post was created&quot;)&#10;    author = models.ForeignKey(&#10;        User,&#10;        on_delete=models.CASCADE,&#10;        related_name='posts',&#10;        verbose_name=&quot;Author&quot;,&#10;        help_text=&quot;Author of the post&quot;&#10;    )&#10;&#10;    class Meta:&#10;        ordering = ['-published_at']&#10;        verbose_name = &quot;Post&quot;&#10;        verbose_name_plural = &quot;Posts&quot;&#10;&#10;    def __str__(self):&#10;        return self.title&#10;&#10;    def save(self, *args, **kwargs):&#10;        if not self.slug:&#10;            self.slug = slugify(self.title)&#10;        super().save(*args, **kwargs)&#10;&#10;class Song(models.Model):&#10;    title = models.CharField(max_length=200, verbose_name=&quot;Title&quot;, help_text=&quot;Title of the song&quot;)&#10;    artist = models.CharField(max_length=100, verbose_name=&quot;Artist&quot;, help_text=&quot;Artist of the song&quot;)&#10;    audio_file = models.FileField(upload_to='songs/', verbose_name=&quot;Audio File&quot;, help_text=&quot;Audio file of the song&quot;)&#10;    lyrics = models.TextField(blank=True, null=True, verbose_name=&quot;Lyrics&quot;, help_text=&quot;Lyrics of the song&quot;)&#10;    release_date = models.DateField(verbose_name=&quot;Release Date&quot;, help_text=&quot;Release date of the song&quot;)&#10;    upload_date = models.DateTimeField(auto_now_add=True, verbose_name=&quot;Created At&quot;, help_text=&quot;Date and time when the song was created&quot;)&#10;&#10;    class Meta:&#10;        ordering = ['-release_date']&#10;        verbose_name = &quot;Song&quot;&#10;        verbose_name_plural = &quot;Songs&quot;&#10;&#10;    def __str__(self):&#10;        return f&quot;{self.title} by {self.artist}&quot; if self.artist else self.title&#10;&#10;class GalleryImage(models.Model):&#10;    image = models.ImageField(upload_to='gallery/', verbose_name=&quot;Image&quot;, help_text=&quot;Image for the gallery&quot;)&#10;    caption = models.CharField(max_length=255, blank=True, null=True, verbose_name=&quot;Caption&quot;, help_text=&quot;Caption for the image&quot;)&#10;    upload_date = models.DateTimeField(auto_now_add=True, verbose_name=&quot;Upload Date&quot;, help_text=&quot;Date and time when the image was uploaded&quot;)&#10;&#10;    class Meta:&#10;        ordering = ['-upload_date']&#10;        verbose_name = &quot;Gallery Image&quot;&#10;        verbose_name_plural = &quot;Gallery Images&quot;&#10;&#10;    def __str__(self):&#10;        return self.image.name" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/kunnic/serializers.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/kunnic/serializers.py" />
              <option name="originalContent" value="from rest_framework import serializers&#10;from django.contrib.auth.models import User&#10;from kunnic.models import Post, Gallery, Song&#10;&#10;class UserSerializer(serializers.ModelSerializer):&#10;    class Meta:&#10;        model = User&#10;        fields = ['id', 'username', 'email']&#10;&#10;class PostSerializer(serializers.ModelSerializer):&#10;    author = UserSerializer(read_only=True)&#10;&#10;    class Meta:&#10;        model = Post&#10;        fields = ['id', 'title', 'slug', 'content', 'is_published', 'published_at', 'updated_at', 'created_at', 'author']&#10;        read_only_fields = ['slug', 'author', 'updated_at', 'created_at']&#10;&#10;class GalleryImageSerializer(serializers.ModelSerializer):&#10;    class Meta:&#10;        model = Gallery&#10;        fields = ['id', 'image', 'caption', 'upload_date']&#10;        read_only_fields = ['upload_date']&#10;&#10;class SongSerializer(serializers.ModelSerializer):&#10;    class Meta:&#10;        model = Song&#10;        fields = ['id', 'title', 'artist', 'audio_file', 'lyrics', 'release_date', 'upload_date']&#10;        read_only_fields = ['upload_date']" />
              <option name="updatedContent" value="from rest_framework import serializers&#10;from django.contrib.auth.models import User&#10;from kunnic.models import Post, GalleryImage, Song&#10;&#10;class UserSerializer(serializers.ModelSerializer):&#10;    class Meta:&#10;        model = User&#10;        fields = ['id', 'username', 'email']&#10;&#10;class PostSerializer(serializers.ModelSerializer):&#10;    author = UserSerializer(read_only=True)&#10;&#10;    class Meta:&#10;        model = Post&#10;        fields = ['id', 'title', 'slug', 'content', 'is_published', 'published_at', 'updated_at', 'created_at', 'author']&#10;        read_only_fields = ['slug', 'author', 'updated_at', 'created_at']&#10;&#10;class GalleryImageSerializer(serializers.ModelSerializer):&#10;    class Meta:&#10;        model = GalleryImage&#10;        fields = ['id', 'image', 'caption', 'upload_date']&#10;        read_only_fields = ['upload_date']&#10;&#10;class SongSerializer(serializers.ModelSerializer):&#10;    class Meta:&#10;        model = Song&#10;        fields = ['id', 'title', 'artist', 'audio_file', 'lyrics', 'release_date', 'upload_date']&#10;        read_only_fields = ['upload_date']" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/kunnic/views.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/kunnic/views.py" />
              <option name="originalContent" value="from django.shortcuts import render&#10;&#10;from rest_framework import viewsets, permissions&#10;from kunnic.models import Post, Gallery, Song&#10;from kunnic.serializers import PostSerializer, GalleryImageSerializer, SongSerializer&#10;&#10;# Create your views here.&#10;class PostViewSet(viewsets.ModelViewSet):&#10;    queryset = Post.objects.filter(is_published=True).order_by('-published_at')&#10;    serializer_class = PostSerializer&#10;    permission_classes = [permissions.IsAuthenticatedOrReadOnly]&#10;&#10;    lookup_field = 'slug'&#10;&#10;    def perform_create(self, serializer):&#10;        serializer.save(author=self.request.user)&#10;&#10;class GalleryImageViewSet(viewsets.ModelViewSet):&#10;    queryset = Gallery.objects.all().order_by('-upload_date')&#10;    serializer_class = GalleryImageSerializer&#10;    permission_classes = [permissions.IsAuthenticatedOrReadOnly]&#10;&#10;class SongViewSet(viewsets.ModelViewSet):&#10;    queryset = Song.objects.all().order_by('-release_date')&#10;    serializer_class = SongSerializer&#10;    permission_classes = [permissions.IsAuthenticatedOrReadOnly]&#10;&#10;    def perform_create(self, serializer):&#10;        serializer.save(author=self.request.user)" />
              <option name="updatedContent" value="from django.shortcuts import render&#10;&#10;from rest_framework import viewsets, permissions&#10;from kunnic.models import Post, GalleryImage, Song&#10;from kunnic.serializers import PostSerializer, GalleryImageSerializer, SongSerializer&#10;&#10;# Create your views here.&#10;class PostViewSet(viewsets.ModelViewSet):&#10;    queryset = Post.objects.filter(is_published=True).order_by('-published_at')&#10;    serializer_class = PostSerializer&#10;    permission_classes = [permissions.IsAuthenticatedOrReadOnly]&#10;&#10;    lookup_field = 'slug'&#10;&#10;    def perform_create(self, serializer):&#10;        serializer.save(author=self.request.user)&#10;&#10;class GalleryImageViewSet(viewsets.ModelViewSet):&#10;    queryset = GalleryImage.objects.all().order_by('-upload_date')&#10;    serializer_class = GalleryImageSerializer&#10;    permission_classes = [permissions.IsAuthenticatedOrReadOnly]&#10;&#10;class SongViewSet(viewsets.ModelViewSet):&#10;    queryset = Song.objects.all().order_by('-release_date')&#10;    serializer_class = SongSerializer&#10;    permission_classes = [permissions.IsAuthenticatedOrReadOnly]&#10;&#10;    def perform_create(self, serializer):&#10;        serializer.save(author=self.request.user)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/.gitignore">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/.gitignore" />
              <option name="updatedContent" value="# Dependencies&#10;node_modules/&#10;npm-debug.log*&#10;yarn-debug.log*&#10;yarn-error.log*&#10;pnpm-debug.log*&#10;lerna-debug.log*&#10;&#10;# Build outputs&#10;dist/&#10;build/&#10;*.local&#10;&#10;# Environment variables&#10;.env&#10;.env.local&#10;.env.development.local&#10;.env.test.local&#10;.env.production.local&#10;&#10;# Runtime data&#10;pids&#10;*.pid&#10;*.seed&#10;*.pid.lock&#10;&#10;# Coverage directory used by tools like istanbul&#10;coverage/&#10;*.lcov&#10;&#10;# Logs&#10;logs&#10;*.log&#10;npm-debug.log*&#10;yarn-debug.log*&#10;yarn-error.log*&#10;pnpm-debug.log*&#10;lerna-debug.log*&#10;&#10;# Editor directories and files&#10;.vscode/*&#10;!.vscode/extensions.json&#10;.idea&#10;.DS_Store&#10;*.suo&#10;*.ntvs*&#10;*.njsproj&#10;*.sln&#10;*.sw?&#10;&#10;# OS generated files&#10;.DS_Store&#10;.DS_Store?&#10;._*&#10;.Spotlight-V100&#10;.Trashes&#10;ehthumbs.db&#10;Thumbs.db&#10;&#10;# Temporary folders&#10;tmp/&#10;temp/&#10;&#10;# ESLint cache&#10;.eslintcache&#10;&#10;# Parcel cache&#10;.parcel-cache&#10;&#10;# Vite cache&#10;.vite&#10;&#10;# TypeScript cache&#10;*.tsbuildinfo&#10;&#10;# Optional npm cache directory&#10;.npm&#10;&#10;# Optional eslint cache&#10;.eslintcache&#10;&#10;# Microbundle cache&#10;.rpt2_cache/&#10;.rts2_cache_cjs/&#10;.rts2_cache_es/&#10;.rts2_cache_umd/&#10;&#10;# Optional REPL history&#10;.node_repl_history&#10;&#10;# Output of 'npm pack'&#10;*.tgz&#10;&#10;# Yarn Integrity file&#10;.yarn-integrity" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>