<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/backend/kunnic/tests.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/kunnic/tests.py" />
              <option name="originalContent" value="from django.test import TestCase&#10;" />
              <option name="updatedContent" value="from django.contrib.auth.models import User&#10;from django.core.files.uploadedfile import SimpleUploadedFile&#10;from rest_framework.test import APITestCase&#10;from rest_framework import status&#10;from django.urls import reverse&#10;from datetime import date&#10;from kunnic.models import Post, Comment, Song, GalleryImage&#10;&#10;&#10;class PostAPITestCase(APITestCase):&#10;    &quot;&quot;&quot;Test cases for Posts API endpoints&quot;&quot;&quot;&#10;&#10;    def setUp(self):&#10;        &quot;&quot;&quot;Set up test data&quot;&quot;&quot;&#10;        self.testuser = User.objects.create_user(&#10;            username='testuser',&#10;            email='test@example.com',&#10;            password='testpass123'&#10;        )&#10;&#10;    def test_list_published_posts(self):&#10;        &quot;&quot;&quot;Test Case 1.1: List Published Posts&quot;&quot;&quot;&#10;        # Create published and unpublished posts&#10;        post_published = Post.objects.create(&#10;            title='Published Post',&#10;            slug='published-post',&#10;            content='This is a published post',&#10;            is_published=True,&#10;            author=self.testuser&#10;        )&#10;        post_unpublished = Post.objects.create(&#10;            title='Unpublished Post',&#10;            slug='unpublished-post',&#10;            content='This is an unpublished post',&#10;            is_published=False,&#10;            author=self.testuser&#10;        )&#10;&#10;        # Make GET request&#10;        url = reverse('post-list')&#10;        response = self.client.get(url)&#10;&#10;        # Assertions&#10;        self.assertEqual(response.status_code, status.HTTP_200_OK)&#10;        self.assertEqual(len(response.data['results']), 1)&#10;        self.assertEqual(response.data['results'][0]['slug'], 'published-post')&#10;&#10;        # Ensure unpublished post is not in response&#10;        slugs_in_response = [post['slug'] for post in response.data['results']]&#10;        self.assertNotIn('unpublished-post', slugs_in_response)&#10;&#10;    def test_retrieve_single_published_post(self):&#10;        &quot;&quot;&quot;Test Case 1.2: Retrieve a Single Published Post&quot;&quot;&quot;&#10;        # Create a published post&#10;        post_published = Post.objects.create(&#10;            title='My Published Post',&#10;            slug='my-published-post',&#10;            content='This is the content of my published post',&#10;            is_published=True,&#10;            author=self.testuser&#10;        )&#10;&#10;        # Make GET request&#10;        url = reverse('post-detail', kwargs={'slug': 'my-published-post'})&#10;        response = self.client.get(url)&#10;&#10;        # Assertions&#10;        self.assertEqual(response.status_code, status.HTTP_200_OK)&#10;        self.assertEqual(response.data['title'], 'My Published Post')&#10;        self.assertEqual(response.data['slug'], 'my-published-post')&#10;        self.assertEqual(response.data['content'], 'This is the content of my published post')&#10;        self.assertEqual(response.data['author']['username'], 'testuser')&#10;&#10;    def test_retrieve_unpublished_post_returns_404(self):&#10;        &quot;&quot;&quot;Test Case 1.3: Attempt to Retrieve an Unpublished Post&quot;&quot;&quot;&#10;        # Create an unpublished post&#10;        post_unpublished = Post.objects.create(&#10;            title='My Unpublished Post',&#10;            slug='my-unpublished-post',&#10;            content='This is an unpublished post',&#10;            is_published=False,&#10;            author=self.testuser&#10;        )&#10;&#10;        # Make GET request&#10;        url = reverse('post-detail', kwargs={'slug': 'my-unpublished-post'})&#10;        response = self.client.get(url)&#10;&#10;        # Assertions&#10;        self.assertEqual(response.status_code, status.HTTP_404_NOT_FOUND)&#10;&#10;    def test_create_post_authenticated_user(self):&#10;        &quot;&quot;&quot;Test Case 1.4: Create a Post as an Authenticated User&quot;&quot;&quot;&#10;        # Authenticate user&#10;        self.client.force_authenticate(user=self.testuser)&#10;&#10;        # Prepare post data&#10;        post_data = {&#10;            'title': 'New Test Post',&#10;            'content': 'This is the content of the new test post'&#10;        }&#10;&#10;        # Make POST request&#10;        url = reverse('post-list')&#10;        response = self.client.post(url, post_data, format='json')&#10;&#10;        # Assertions&#10;        self.assertEqual(response.status_code, status.HTTP_201_CREATED)&#10;&#10;        # Check if post was created in database&#10;        created_post = Post.objects.get(title='New Test Post')&#10;        self.assertEqual(created_post.author, self.testuser)&#10;        self.assertEqual(created_post.slug, 'new-test-post')  # Auto-generated slug&#10;        self.assertEqual(created_post.content, 'This is the content of the new test post')&#10;&#10;    def test_create_post_unauthenticated_user(self):&#10;        &quot;&quot;&quot;Test Case 1.5: Attempt to Create a Post as an Unauthenticated User&quot;&quot;&quot;&#10;        # Prepare post data&#10;        post_data = {&#10;            'title': 'Unauthorized Post',&#10;            'content': 'This should not be created'&#10;        }&#10;&#10;        # Make POST request without authentication&#10;        url = reverse('post-list')&#10;        response = self.client.post(url, post_data, format='json')&#10;&#10;        # Assertions&#10;        self.assertIn(response.status_code, [status.HTTP_401_UNAUTHORIZED, status.HTTP_403_FORBIDDEN])&#10;&#10;&#10;class CommentAPITestCase(APITestCase):&#10;    &quot;&quot;&quot;Test cases for Comments API endpoints&quot;&quot;&quot;&#10;&#10;    def setUp(self):&#10;        &quot;&quot;&quot;Set up test data&quot;&quot;&quot;&#10;        self.testuser = User.objects.create_user(&#10;            username='testuser',&#10;            email='test@example.com',&#10;            password='testpass123'&#10;        )&#10;        self.test_post = Post.objects.create(&#10;            title='Test Post',&#10;            slug='test-post',&#10;            content='This is a test post',&#10;            is_published=True,&#10;            author=self.testuser&#10;        )&#10;&#10;    def test_list_comments_for_post(self):&#10;        &quot;&quot;&quot;Test Case 2.1: List Comments for a Post&quot;&quot;&quot;&#10;        # Create two comments for the test post&#10;        comment1 = Comment.objects.create(&#10;            post=self.test_post,&#10;            author='User One',&#10;            content='First comment'&#10;        )&#10;        comment2 = Comment.objects.create(&#10;            post=self.test_post,&#10;            author='User Two',&#10;            content='Second comment'&#10;        )&#10;&#10;        # Make GET request&#10;        url = reverse('post-comments', kwargs={'slug': 'test-post'})&#10;        response = self.client.get(url)&#10;&#10;        # Assertions&#10;        self.assertEqual(response.status_code, status.HTTP_200_OK)&#10;        self.assertEqual(len(response.data), 2)&#10;&#10;    def test_create_comment_for_post(self):&#10;        &quot;&quot;&quot;Test Case 2.2: Create a Comment for a Post&quot;&quot;&quot;&#10;        # Authenticate user (based on current implementation)&#10;        self.client.force_authenticate(user=self.testuser)&#10;&#10;        # Prepare comment data&#10;        comment_data = {&#10;            'author': 'Test Commenter',&#10;            'content': 'This is a test comment'&#10;        }&#10;&#10;        # Make POST request&#10;        url = reverse('post-comments', kwargs={'slug': 'test-post'})&#10;        response = self.client.post(url, comment_data, format='json')&#10;&#10;        # Assertions&#10;        self.assertEqual(response.status_code, status.HTTP_201_CREATED)&#10;&#10;        # Check if comment was created in database&#10;        created_comment = Comment.objects.filter(post=self.test_post, content='This is a test comment').first()&#10;        self.assertIsNotNone(created_comment)&#10;        self.assertEqual(created_comment.post, self.test_post)&#10;&#10;    def test_create_comment_invalid_data(self):&#10;        &quot;&quot;&quot;Test Case 2.3: Attempt to Create a Comment with Invalid Data&quot;&quot;&quot;&#10;        # Authenticate user&#10;        self.client.force_authenticate(user=self.testuser)&#10;&#10;        # Prepare invalid comment data (missing content)&#10;        comment_data = {&#10;            'author': 'Test Commenter'&#10;            # Missing 'content' field&#10;        }&#10;&#10;        # Make POST request&#10;        url = reverse('post-comments', kwargs={'slug': 'test-post'})&#10;        response = self.client.post(url, comment_data, format='json')&#10;&#10;        # Assertions&#10;        self.assertEqual(response.status_code, status.HTTP_400_BAD_REQUEST)&#10;        self.assertIn('content', response.data)  # Error should mention content field&#10;&#10;&#10;class SongAPITestCase(APITestCase):&#10;    &quot;&quot;&quot;Test cases for Songs API endpoints&quot;&quot;&quot;&#10;&#10;    def setUp(self):&#10;        &quot;&quot;&quot;Set up test data&quot;&quot;&quot;&#10;        # Create mock audio file&#10;        audio_file1 = SimpleUploadedFile(&quot;test_song1.mp3&quot;, b&quot;audio_content&quot;, content_type=&quot;audio/mpeg&quot;)&#10;        audio_file2 = SimpleUploadedFile(&quot;test_song2.mp3&quot;, b&quot;audio_content&quot;, content_type=&quot;audio/mpeg&quot;)&#10;&#10;        # Create two songs&#10;        self.song1 = Song.objects.create(&#10;            title='Test Song 1',&#10;            artist='Test Artist 1',&#10;            audio_file=audio_file1,&#10;            lyrics='Test lyrics for song 1',&#10;            release_date=date(2024, 1, 1)&#10;        )&#10;        self.song2 = Song.objects.create(&#10;            title='Test Song 2',&#10;            artist='Test Artist 2',&#10;            audio_file=audio_file2,&#10;            lyrics='Test lyrics for song 2',&#10;            release_date=date(2024, 2, 1)&#10;        )&#10;&#10;    def test_list_songs(self):&#10;        &quot;&quot;&quot;Test Case 3.1: List Songs&quot;&quot;&quot;&#10;        # Make GET request&#10;        url = reverse('song-list')&#10;        response = self.client.get(url)&#10;&#10;        # Assertions&#10;        self.assertEqual(response.status_code, status.HTTP_200_OK)&#10;        self.assertEqual(len(response.data['results']), 2)&#10;&#10;&#10;class GalleryAPITestCase(APITestCase):&#10;    &quot;&quot;&quot;Test cases for Gallery API endpoints&quot;&quot;&quot;&#10;&#10;    def setUp(self):&#10;        &quot;&quot;&quot;Set up test data&quot;&quot;&quot;&#10;        # Create mock image files&#10;        image_file1 = SimpleUploadedFile(&quot;test_image1.jpg&quot;, b&quot;image_content&quot;, content_type=&quot;image/jpeg&quot;)&#10;        image_file2 = SimpleUploadedFile(&quot;test_image2.jpg&quot;, b&quot;image_content&quot;, content_type=&quot;image/jpeg&quot;)&#10;&#10;        # Create two gallery images&#10;        self.image1 = GalleryImage.objects.create(&#10;            image=image_file1,&#10;            caption='Test image 1'&#10;        )&#10;        self.image2 = GalleryImage.objects.create(&#10;            image=image_file2,&#10;            caption='Test image 2'&#10;        )&#10;&#10;    def test_list_gallery_images(self):&#10;        &quot;&quot;&quot;Test Case 3.2: List Gallery Images&quot;&quot;&quot;&#10;        # Make GET request&#10;        url = reverse('gallery-list')&#10;        response = self.client.get(url)&#10;&#10;        # Assertions&#10;        self.assertEqual(response.status_code, status.HTTP_200_OK)&#10;        self.assertEqual(len(response.data['results']), 2)&#10;&#10;&#10;class IntegrationTestCase(APITestCase):&#10;    &quot;&quot;&quot;Additional integration tests&quot;&quot;&quot;&#10;&#10;    def setUp(self):&#10;        &quot;&quot;&quot;Set up test data&quot;&quot;&quot;&#10;        self.testuser = User.objects.create_user(&#10;            username='testuser',&#10;            email='test@example.com',&#10;            password='testpass123'&#10;        )&#10;&#10;    def test_post_creation_with_automatic_slug_generation(self):&#10;        &quot;&quot;&quot;Test that slugs are automatically generated from titles&quot;&quot;&quot;&#10;        self.client.force_authenticate(user=self.testuser)&#10;&#10;        post_data = {&#10;            'title': 'This is a Test Post With Spaces',&#10;            'content': 'Content here'&#10;        }&#10;&#10;        url = reverse('post-list')&#10;        response = self.client.post(url, post_data, format='json')&#10;&#10;        self.assertEqual(response.status_code, status.HTTP_201_CREATED)&#10;        created_post = Post.objects.get(title='This is a Test Post With Spaces')&#10;        self.assertEqual(created_post.slug, 'this-is-a-test-post-with-spaces')&#10;&#10;    def test_post_ordering(self):&#10;        &quot;&quot;&quot;Test that posts are ordered by published_at in descending order&quot;&quot;&quot;&#10;        # Create posts with different published_at times&#10;        from django.utils import timezone&#10;        import datetime&#10;&#10;        old_post = Post.objects.create(&#10;            title='Old Post',&#10;            slug='old-post',&#10;            content='Old content',&#10;            is_published=True,&#10;            author=self.testuser,&#10;            published_at=timezone.now() - datetime.timedelta(days=1)&#10;        )&#10;&#10;        new_post = Post.objects.create(&#10;            title='New Post',&#10;            slug='new-post',&#10;            content='New content',&#10;            is_published=True,&#10;            author=self.testuser,&#10;            published_at=timezone.now()&#10;        )&#10;&#10;        url = reverse('post-list')&#10;        response = self.client.get(url)&#10;&#10;        self.assertEqual(response.status_code, status.HTTP_200_OK)&#10;        self.assertEqual(len(response.data['results']), 2)&#10;        # First post should be the newer one&#10;        self.assertEqual(response.data['results'][0]['slug'], 'new-post')&#10;        self.assertEqual(response.data['results'][1]['slug'], 'old-post')" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>