<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/backend/kunnic/models.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/kunnic/models.py" />
              <option name="originalContent" value="from django.db import models&#10;from django.contrib.auth.models import User&#10;from django.utils.text import slugify&#10;from django.utils import timezone&#10;# Create your models here.&#10;&#10;class Post(models.Model):&#10;    title = models.CharField(max_length=200, verbose_name=&quot;Title&quot;, help_text=&quot;Title of the post&quot;)&#10;    slug = models.SlugField(max_length=200, unique=True, verbose_name=&quot;Slug&quot;, help_text=&quot;Unique identifier for the post&quot;)&#10;    content = models.TextField(verbose_name=&quot;Content&quot;, help_text=&quot;Main content of the post&quot;)&#10;    is_published = models.BooleanField(default=False, verbose_name=&quot;Is Published&quot;, help_text=&quot;Indicates if the post is published&quot;)&#10;    published_at = models.DateTimeField(default=timezone.now, verbose_name=&quot;Published At&quot;, help_text=&quot;Date and time when the post was published&quot;)&#10;    updated_at = models.DateTimeField(auto_now=True, verbose_name=&quot;Updated At&quot;, help_text=&quot;Date and time when the post was last updated&quot;)&#10;    created_at = models.DateTimeField(auto_now_add=True, verbose_name=&quot;Created At&quot;, help_text=&quot;Date and time when the post was created&quot;)&#10;    author = models.ForeignKey(&#10;        User,&#10;        on_delete=models.CASCADE,&#10;        related_name='posts',&#10;        verbose_name=&quot;Author&quot;,&#10;        help_text=&quot;Author of the post&quot;&#10;    )&#10;&#10;    class Meta:&#10;        ordering = ['-published_at']&#10;        verbose_name = &quot;Post&quot;&#10;        verbose_name_plural = &quot;Posts&quot;&#10;&#10;    def __str__(self):&#10;        return self.title&#10;&#10;    def save(self, *args, **kwargs):&#10;        if not self.slug:&#10;            self.slug = slugify(self.title)&#10;        super().save(*args, **kwargs)&#10;&#10;class Song(models.Model):&#10;    title = models.CharField(max_length=200, verbose_name=&quot;Title&quot;, help_text=&quot;Title of the song&quot;)&#10;    artist = models.CharField(max_length=100, verbose_name=&quot;Artist&quot;, help_text=&quot;Artist of the song&quot;)&#10;    audio_file = models.FileField(upload_to='songs/', verbose_name=&quot;Audio File&quot;, help_text=&quot;Audio file of the song&quot;)&#10;    lyrics = models.TextField(blank=True, null=True, verbose_name=&quot;Lyrics&quot;, help_text=&quot;Lyrics of the song&quot;)&#10;    release_date = models.DateField(verbose_name=&quot;Release Date&quot;, help_text=&quot;Release date of the song&quot;)&#10;    upload_date = models.DateTimeField(auto_now_add=True, verbose_name=&quot;Created At&quot;, help_text=&quot;Date and time when the song was created&quot;)&#10;&#10;    class Meta:&#10;        ordering = ['-release_date']&#10;        verbose_name = &quot;Song&quot;&#10;        verbose_name_plural = &quot;Songs&quot;&#10;&#10;    def __str__(self):&#10;        return f&quot;{self.title} by {self.artist}&quot; if self.artist else self.title&#10;&#10;class Gallery(models.Model):&#10;    image = models.ImageField(upload_to='gallery/', verbose_name=&quot;Image&quot;, help_text=&quot;Image for the gallery&quot;)&#10;    caption = models.CharField(max_length=255, blank=True, null=True, verbose_name=&quot;Caption&quot;, help_text=&quot;Caption for the image&quot;)&#10;    upload_date = models.DateTimeField(auto_now_add=True, verbose_name=&quot;Upload Date&quot;, help_text=&quot;Date and time when the image was uploaded&quot;)&#10;&#10;    class Meta:&#10;        ordering = ['-upload_date']&#10;        verbose_name = &quot;Gallery Image&quot;&#10;        verbose_name_plural = &quot;Gallery Images&quot;&#10;&#10;    def __str__(self):&#10;        return self.image.name" />
              <option name="updatedContent" value="from django.db import models&#10;from django.contrib.auth.models import User&#10;from django.utils.text import slugify&#10;from django.utils import timezone&#10;# Create your models here.&#10;&#10;class Post(models.Model):&#10;    title = models.CharField(max_length=200, verbose_name=&quot;Title&quot;, help_text=&quot;Title of the post&quot;)&#10;    slug = models.SlugField(max_length=200, unique=True, verbose_name=&quot;Slug&quot;, help_text=&quot;Unique identifier for the post&quot;)&#10;    content = models.TextField(verbose_name=&quot;Content&quot;, help_text=&quot;Main content of the post&quot;)&#10;    is_published = models.BooleanField(default=False, verbose_name=&quot;Is Published&quot;, help_text=&quot;Indicates if the post is published&quot;)&#10;    published_at = models.DateTimeField(default=timezone.now, verbose_name=&quot;Published At&quot;, help_text=&quot;Date and time when the post was published&quot;)&#10;    updated_at = models.DateTimeField(auto_now=True, verbose_name=&quot;Updated At&quot;, help_text=&quot;Date and time when the post was last updated&quot;)&#10;    created_at = models.DateTimeField(auto_now_add=True, verbose_name=&quot;Created At&quot;, help_text=&quot;Date and time when the post was created&quot;)&#10;    author = models.ForeignKey(&#10;        User,&#10;        on_delete=models.CASCADE,&#10;        related_name='posts',&#10;        verbose_name=&quot;Author&quot;,&#10;        help_text=&quot;Author of the post&quot;&#10;    )&#10;&#10;    class Meta:&#10;        ordering = ['-published_at']&#10;        verbose_name = &quot;Post&quot;&#10;        verbose_name_plural = &quot;Posts&quot;&#10;&#10;    def __str__(self):&#10;        return self.title&#10;&#10;    def save(self, *args, **kwargs):&#10;        if not self.slug:&#10;            self.slug = slugify(self.title)&#10;        super().save(*args, **kwargs)&#10;&#10;class Song(models.Model):&#10;    title = models.CharField(max_length=200, verbose_name=&quot;Title&quot;, help_text=&quot;Title of the song&quot;)&#10;    artist = models.CharField(max_length=100, verbose_name=&quot;Artist&quot;, help_text=&quot;Artist of the song&quot;)&#10;    audio_file = models.FileField(upload_to='songs/', verbose_name=&quot;Audio File&quot;, help_text=&quot;Audio file of the song&quot;)&#10;    lyrics = models.TextField(blank=True, null=True, verbose_name=&quot;Lyrics&quot;, help_text=&quot;Lyrics of the song&quot;)&#10;    release_date = models.DateField(verbose_name=&quot;Release Date&quot;, help_text=&quot;Release date of the song&quot;)&#10;    upload_date = models.DateTimeField(auto_now_add=True, verbose_name=&quot;Created At&quot;, help_text=&quot;Date and time when the song was created&quot;)&#10;&#10;    class Meta:&#10;        ordering = ['-release_date']&#10;        verbose_name = &quot;Song&quot;&#10;        verbose_name_plural = &quot;Songs&quot;&#10;&#10;    def __str__(self):&#10;        return f&quot;{self.title} by {self.artist}&quot; if self.artist else self.title&#10;&#10;class GalleryImage(models.Model):&#10;    image = models.ImageField(upload_to='gallery/', verbose_name=&quot;Image&quot;, help_text=&quot;Image for the gallery&quot;)&#10;    caption = models.CharField(max_length=255, blank=True, null=True, verbose_name=&quot;Caption&quot;, help_text=&quot;Caption for the image&quot;)&#10;    upload_date = models.DateTimeField(auto_now_add=True, verbose_name=&quot;Upload Date&quot;, help_text=&quot;Date and time when the image was uploaded&quot;)&#10;&#10;    class Meta:&#10;        ordering = ['-upload_date']&#10;        verbose_name = &quot;Gallery Image&quot;&#10;        verbose_name_plural = &quot;Gallery Images&quot;&#10;&#10;    def __str__(self):&#10;        return self.image.name" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>